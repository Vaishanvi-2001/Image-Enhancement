# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1o9F5NchL4FuiAs4kd-9aLiOuRyU1cZTB
"""

from pyngrok import ngrok
import streamlit as st
import streamlit as st
import cv2
import numpy as np

# Your Streamlit app code (place it here)
# Load an image
image = cv2.imread('image5.jpeg')

# Get the dimensions of the image
height, width, _ = image.shape  # _ is used to discard the color channel dimension

# Your Streamlit app code
st.title('Image Transformations')

# Define the transformation matrix for different affine transformations
# 1. Translation
translation_matrix = np.float32([[1, 0, 50], [0, 1, 30]])  # Translate 50 pixels right and 30 pixels down

# 2. Rotation
rotation_matrix = cv2.getRotationMatrix2D((width / 2, height / 2), 45, 1)  # Rotate by 45 degrees

# 3. Scaling
scaling_matrix = np.float32([[0.5, 0, 0], [0, 2, 0]])  # Scale by 50% horizontally and 200% vertically

# 4. Shearing
shearing_matrix = np.float32([[1, 0.2, 0], [0.2, 1, 0]])  # Shear horizontally by 20% and vertically by 20%

if st.button('Show Original Image'):
    st.image(image, caption='Original Image', use_column_width=True)

if st.button('Show Translated Image'):
    translated_image = cv2.warpAffine(image, translation_matrix, (width, height))
    st.image(translated_image, caption='Translated Image', use_column_width=True)

if st.button('Show Rotated Image'):
    rotated_image = cv2.warpAffine(image, rotation_matrix, (width, height))
    st.image(rotated_image, caption='Rotated Image', use_column_width=True)

if st.button('Show Scaled Image'):
    scaled_image = cv2.warpAffine(image, scaling_matrix, (width, height))
    st.image(scaled_image, caption='Scaled Image', use_column_width=True)

if st.button('Show Sheared Image'):
    sheared_image = cv2.warpAffine(image, shearing_matrix, (width, height))
    st.image(sheared_image, caption='Sheared Image', use_column_width=True)

st.title('Image Enhancements')

if st.button('Show Original Image (Grayscale)'):
    image_gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    st.image(image_gray, caption='Original Image (Grayscale)', use_column_width=True)

if st.button('Show Contrast Enhancement (Histogram Equalization)'):
    enhanced_image = cv2.equalizeHist(image_gray)
    st.image(enhanced_image, caption='Contrast Enhancement (Histogram Equalization)', use_column_width=True)

if st.button('Show Brightness and Contrast Adjustment'):
    alpha = 1.5  # Contrast control (1.0 means no change)
    beta = 30    # Brightness control (0 means no change)
    enhanced_image = cv2.convertScaleAbs(image, alpha=alpha, beta=beta)
    st.image(enhanced_image, caption='Brightness and Contrast Adjustment', use_column_width=True)

if st.button('Show Smoothing and Blurring (Gaussian Blur)'):
    blurred_image = cv2.GaussianBlur(image, (5, 5), 0)
    st.image(blurred_image, caption='Smoothing and Blurring (Gaussian Blur)', use_column_width=True)

if st.button('Show Sharpening (Unsharp Masking)'):
    kernel = np.array([[-1, -1, -1], [-1, 9, -1], [-1, -1, -1]])
    sharpened_image = cv2.filter2D(image, -1, kernel)
    st.image(sharpened_image, caption='Sharpening (Unsharp Masking)', use_column_width=True)

if st.button('Show Color Balance Adjustment'):
    corrected_image = cv2.xphoto.createSimpleWB()
    corrected_image = corrected_image.balanceWhite(image)
    st.image(corrected_image, caption='Color Balance Adjustment', use_column_width=True)



# Create a public URL for your Streamlit app
public_url = ngrok.connect()

# Display the URL
st.write('Streamlit app is live at:', public_url)

# Run Streamlit app
if __name__ == '__main__':
    st.run()